library(here)
library(lme4)
library(tidyverse)
library(readxl)
library(ggplot2)
library(plotly)
library(lmtest)

install.packages('IRkernel')
library(IRkernel)
# Install the R kernel system-wide (for all users)
Sys.setenv(JUPYTER_BIN ="C:/Users/yujer/anaconda3/envs/main/Scripts/jupyter.exe")
IRkernel::installspec(user = TRUE)

install.packages("here")
install.packages("lme4")
install.packages("tidyverse")
install.packages("readxl")
install.packages("ggplot2")
install.packages("plotly")
install.packages("lmtest")

install.packages("MuMIn")
install.packages("caret")


library(here)
library(lme4)
librIR kernel， 不同ary(tidyverse)
library(readxl)
library(ggplot2)
library(plotly)
library(lmtest)
library(glmmLasso)
library(MASS)
library(MuMIn)
library(caret)

.Library


breaks = c(-Inf,2,2.5,3,3.5,4,4.5,5,6.6Inf)
hetero = chalk %>% mutate(
  groupedPinch = cut(Pinch,breaks=breaks,right=FALSE)
) 

hetero = hetero %>% group_by(groupedPinch) %>% summarize(
  mean = mean(Pull),
  var = var(Pull)
)
plot(hetero$mean,hetero$var)
# x squared relationship

test = glmer(Pull~Pinch + bChalk + Person + (1|Daydisc) + (1|Daydisc:Day_Order),
             data = chalk,
             Gamma(link = "log"))

test2 = glmer(Pull~Pinch + bChalk + Person + (1|Daydisc:Day_Order),
             data = chalk,
             Gamma(link = "log"))

test3 = glmer(Pull~Pinch + bChalk + Person + (1|Daydisc),
              data = chalk,
              Gamma(link = "log"))

AIC(test)
AIC(test2)
AIC(test3)


10^(AIC(test) - AIC(test2))

fig = plot_ly(
  x = chalk$Pull,
  y = residuals(test)
) 

fig <- fig %>% layout(title = "Residuals by Pull",
                      xaxis = list(title="Pull"),
                      yxis = list("Residuals")
)

randc = glmmPQL(Pull~1,
                 random=list(DayorderxDaydisc=~1),
                 family = Gamma(link = "log"),
                 data=chalk
                 )


# Test out Model Fitting Approach
modelselect = glmmLasso(fix = Pull~Pinch + bChalk + Person,
                        rnd = list(Daydisc=~1,Dayorder:Daydisc=~1),
                        data = chalk,
                        lambda = 100,
                        family = gaussian(link="log")
                        )
  
summary(modelselect)
  


#fits w MuMIN
test = glmer(Pull~Pinch*bChalk*Person + (1|Daydisc) + (1|Daydisc:Day_Order),
             data = chalk,
             Gamma(link = "log"),
             na.action=na.fail) 


table = dredge(test)

plot(table,labAsExpr = TRUE)
table = dredge(test)
tableBIC = dredge(test,rank=BIC)
table
tableBIC

fig

bptest(test)


# Variable Selection
chalk$DayorderxDaydisc = interaction(chalk$Daydisc,chalk$Day_Order)

initial = glmmLasso(fix = Pull~Pinch + bChalk + Person,
                    rnd = list(Daydisc=~1,DayorderxDaydisc=~1),
                    data = chalk,
                    lambda=1000,
                    family=poisson(link = "log"),
                    method="REML"
)

?glmmLasso


hist(chalk$Pull)
hist(chalk$Pinch)

range(chalk$Pinch)


plot(chalk$Pinch,log(chalk$Pull))



summary(inisummary(inisummary(initial)
## Not run:
data("soccer")
soccer[,c(4,5,9:16)]<-scale(soccer[,c(4,5,9:16)],center=TRUE,scale=TRUE)
soccer<-data.frame(soccer)

## generalized linear mixed model
## with starting values
glm1 <- glmmLasso(points~transfer.spendings
                  + ave.unfair.score + sold.out
                  + tackles + ave.attend + ball.possession, rnd = list(team=~1),
                  family = poisson(link = log), data = soccer, lambda=100,
                  control = list(print.iter=TRUE,start=c(1,rep(0,29)),q_start=0.7))
summary(glm1)

test = glmer(Pull~Pinch+ bChalk + Person + (1|Daydisc) + (1|Daydisc:Day_Order),
             data = chalk,
             Gamma(link = "log"))



summary(test)
# Filepaths
root=here()

# Import Data
chalk = read.csv(paste0(root,"/Data/Processed/Chalk.csv"))
chalk = chalk %>% mutate(
  used = as.factor(ifelse(Chalk==0,0,1)),
  bChalk = as.factor(ifelse(Chalk==0,0,bChalk)),
  Day = as.Date(Day),
  Daydisc = as.factor(Day),
  Pinch_Order = as.factor(Pinch_Order),
  Day_Order = as.factor(Day_Order)
)



# Quick lme4 check of AIC
# Without Spurious interactions
byUsed = lmer(Pull~Pinch*used*Person + (1|Daydisc),
              data = chalk,
              REML = FALSE)

noDate = lm(Pull~Pinch*used*Person ,data=chalk)

# Compare AIC
AIC(noDate)
AIC(byUsed)
delta = AIC(byUsed) - AIC(noDate)
delta
# Delta AIC is very Large, so date is significant

fig = plot_ly(
  x = chalk$Pull,
  y = residuals(byUsed)
) 

fig = fig %>% layout(
  title = "Residuals by Pull",
  xaxis = "Pull",
  yaxis = "Residuals"
)

fig

bptest(lm(Pull~Pinch, chalk))

bptest(byUsed)
?bptest

# Residuals Very flared, heteroscedastic

qqnorm(residuals(byUsed))
qqline(residuals(byUsed),col="turquoise",lwd=2)

summary(byUsed)

qqplot(residuals(byUsed))



# Fit the Full Model
full = lmer(Pull~Pinch*bChalk*Person + (1|Daydisc),
              data = chalk,
              REML = TRUE)

summary(full)

fig = plot_ly(
  x = chalk$Pull,
  y = residuals(full)
) 

fig = fig %>% layout(
  title = "Residuals by Pull",
  xaxis = "Pull",
  yaxis = "Residuals"
)

qqnorm(residuals(full))
qqline(residuals(byUsed),col="turquoise",lwd=2)

fig

str(full)

wt <- 1 / lm(abs(residuals(full)) ~ full$fitted.values)$fitted.values^2

fullweighted = lmer(Pull~Pinch*bChalk*Person + (1|Daydisc),
                    data = chalk,
                    weights = weights,
                    REML = TRUE)

fig = plot_ly(
  x = chalk$Pull,
  y = residuals(fullweighted)
) 

fig

# Fit Mixed Use Model
noDate = lm(Pull~Pinch*bChalk*Person ,data=chalk)

?glm
shapiro.test(noDate$residuals)

summary(noDate)
anova(noDate)

library(emmeans)
install.packages("emmeans")

test = emmeans(noDate,~bChalk*Pinch)
contrast(test, method = "pairwise", adjust = "tukey")










# Without Spurious interactions
byUsed = lmer(Pull~Pinch + used + Person + (1|Daydisc),
              data = chalk,
              REML = FALSE)

noDate = lm(Pull~Pinch + used + Person ,data=chalk)

# ?extractAIC
# logLik(noDate)

summary(byUsed)
summary(noDate)
AIC(noDate)
AIC(byUsed)
logLik(noDate)

?AIC

?extractAIC

?lm


summary(noDate)
qqnorm(residuals(byUsed))
qqline(residuals(byUsed))

plot(chalk$Pull,residuals(byUsed))

str(chalk$pull)


summary(byUsed)
?lmer


chalk




head(chalk)
str(chalk)

?read_xlsx

install.packages("emmeans")



# FULL NELSON
library(here)
library(lme4)
library(tidyverse)
library(readxl)
library(ggplot2)
library(plotly)
library(MASS)
library(MuMIn)
library(caret)
library(clubSandwich)
library(emmeans)

# Filepaths
root=here()

# Import Data
chalk = read.csv(paste0(root,"/Data/Processed/Chalk.csv"))
chalk = chalk %>% mutate(
  used = as.factor(ifelse(Chalk==0,0,1)),
  bChalk = as.factor(ifelse(Chalk==0,0,bChalk)),
  Day = as.Date(Day),
  Daydisc = as.factor(Day),
  Pinch_Order = as.factor(Pinch_Order),
  Day_Order = as.factor(Day_Order)
)


?dredge
# Set Seed
set.seed(42)

# Split chalk for 5 fold cross validation to check stability of models
chalkfolds = createFolds(y=chalk$Pull,
                         k=5,
                         list=TRUE,
                         returnTrain = TRUE)

Validation = function(train_indices){
  # Subset the Data
  train = chalk[train_indices,]
  test = chalk[-train_indices,]
  
  # Get the Full Model
  fullmodel = lmer(log(Pull)~Pinch*bChalk*Person + (1|Daydisc) + (1|Daydisc:Day_Order),
                    data = train,
                    REML = FALSE,
                    na.action=na.fail) 
  
  # Best Subsets with Dredge
  table = dredge(fullmodel)
  tableBIC = dredge(fullmodel,rank=BIC)
  
  # Select the Top 3 Models From AIC and BIC
  table
  tableBIC
  
  top3AIC = get.models(table,1:3)
  top3BIC = get.models(table,1:3)
  
  # Keep the Common Models
  top = c(top3AIC,top3BIC)
  top = top[unique(names(top))]
  
  testLL = vector("list",length(top))
  for(i in 1:length(top)){
    testLL[i] = logLik(top[[i]],newdata=test)
  }
  names(testLL) = names(top)
  
  return(testLL)
}

# Run the Function
crossvalresults = lapply(chalkfolds,Validation)

# Makre a DF with the LLs
validation_df <- bind_rows(
  purrr::imap(crossvalresults, ~ tibble(
    crossvalresults = .y,
    model = names(.x),
    value = unlist(.x)
  ))
)

validation_df

# Cross validation showed consistency. Generally the 8th model (df=10) and 40th model (df=11), and 48th model (df=12) were in all sets. I chose to continue with model #48 since it appeared in more sets

finalmodel = lmer(log(Pull)~Pinch*Person + bChalk + 
                    bChalk:Person + Person:Pinch + 
                    (1|Daydisc)+ (1|Daydisc:Day_Order),
                  data = chalk)

# Check R^2
r.squaredGLMM(finalmodel)

fig = plot_ly(
  x = chalk$Pull,
  y = residuals(finalmodel)
) 

fig = fig %>% layout(
  title = "Residuals by Pull",
  xaxis = "Pull",
  yaxis = "Residuals"
)

fig

qqnorm(residuals(full))
qqline(residuals(full),col="turquoise",lwd=2)

robustVar = vcovCR(finalmodel,type="CR2")

margmeans = emmeans(finalmodel,~bChalk)

ok = contrast(margmeans, method = "pairwise", adjust = "bonferroni", vcov. = robustVar,Letters=letters)

ok = contrast(margmeans, method = "pairwise")
ok


ok
cld_results <- cld(margmeans, adjust = "bonferroni", vcov. = robustVar, Letters = letters)

?cld

install.packages("multcompView")
library(multcompView)

contrasts <- constrain_pairwise("bChalk", reg_ex = TRUE)

str(contrasts)
?constrain_pairwise

coef()











lfinalmodel = glm(Pull~Pinch + Person + bChalk,
                   data = chalk,
                   family=Gamma(link = "log"))

full = lmer(log(Pull)~Pinch*Person +bChalk + (1|Daydisc)+ (1|Daydisc:Day_Order),
            data = chalk,
            REML = FALSE)

full = lmer(log(Pull)~Pinch*Person + bChalk + (1|Daydisc)+ (1|Daydisc:Day_Order),
            data = chalk,
            REML = FALSE)

fig = plot_ly(
  x = chalk$Pull,
  y = residuals(full)
) 

fig = fig %>% layout(
  title = "Residuals by Pull",
  xaxis = "Pull",
  yaxis = "Residuals"
)

fig

AIC(finalmodel)
AIC(lfinalmodel)
BIC(finalmodel)


qqnorm(residuals(finalmodel))
qqline(residuals(finalmodel),col="turquoise",lwd=2)


full = lmer(Pull~Pinch+bChalk+Person + (1|Daydisc)+ (1|Daydisc:Day_Order),
            data = chalk,
            REML = FALSE)
AIC(full)




